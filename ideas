process.make_graph refactor:
    still a bit remaining as there's some code duplication and inelegant
    code paths in places.

    create axes once and reuse them in the script. take care to make sure 
    changing graph backgrounds still work.

    there's a memory leak and if i loop long enough i run out of memory.
    might have to deallocate things/axes explicitly after saving the plots.

process.make_accessibility_graph:
    extend the function to support gradual transparency and/or colour heatmap 
    based on distance from nearest vehicle. consider giving higher scores if 
    there's more than one car in immediate vicinity - gives people more 
    flexibility for when someone takes the first one.

    maybe add street grid angle to city information, if specified, change 
    accessibility mask shape to take this into account. for example, instead of
    using one circle, we could overlay two ellipses aligned with 
    the street grid to get a closer approximation of walking distance. 
    this will of course be useless for cities without a strong grid, but 
    most of vancouver, toronto, seattle could benefit.

    perhaps higlight vehicles that have just moved into an area fairly lacking
    in cars. this would support an algorithm to calculate possible discount 
    for moving vehicles in off-peak direction (until sign-off, it'll be 
    estimated discount only, since we dont know if 10 other people are driving 
    there), disguised as a map for time being. dynamically price all the things

process.make_cleanness_graph:
    extend make_graph, using different colour indicators for 
    the different reported cleanness levels to answer the important
    question: do kits people mark cars as dirty more frequently
    than east van people?!

process.fuel_level:
    somehow figure out and/or visualize whether people are more likely to use 
    a car with more fuel/charge. might be particularly interesting for electric
    vehicles and cities with all-electric fleets (e.g.,do cars with 
    25-30% charge get orphaned until service brings them in to charge?)

trace.find_car:
    given a data file and a license plate or VIN, trace car's movements
    during the day/in provided set of files. map them.
    (this might be neat for tracing a car that moved the longest distance or
    had the most trips during a day/time period.)

trace.cleanness:
    somehow visualize cars that went from indicated 'unacceptable'
    cleanness rating back to 'good'. see how often and where that happens!

more visualization ideas:
    all of a day's / period's move lines rendered into one image, with
    no location points or underlying map. see if you can identify cities
    or gain any particularly deep insight

    similarly, all location points during a day/week with no underlying
    map, with or without move lines. see how much data is needed until 
    you can visually identify the city, if at all

    could be almost art~~~

