#!/usr/bin/env python2
# coding=utf-8

from . import API_AVAILABLE_VEHICLES_URL, API_AVAILABLE_VEHICLES_HEADERS


CITIES = {
    'berlin': {
        'loc_key': 6099
    },
    'duesseldorf': {
        'loc_key': 1293,
        'display': 'Düsseldorf',
    },
    'hamburg': {
        'loc_key': 40065
    },
    'koeln': {
        'loc_key': 1774,
        'display': 'Cologne',
        'localized': {
            'de': 'Köln'
        }
    },
    'london': {
        'loc_key': 40758
    },
    'muenchen': {
        'loc_key': 4604,
        'display': 'Munich',
        'localized': {
            'de': 'München'
        }
    },
    'sanfrancisco': {
        'loc_key': 4259,
        'display': 'San Francisco'
    },
    'wien': {
        'loc_key': 40468,
        'display': 'Vienna',
        'localized': {
            'de': 'Wien'
        }
    }
}

# fill in city data that can be assumed and autogenerated
for city, city_data in CITIES.items():
    city_data['of_interest'] = True  # we want everything for now

    if 'API_AVAILABLE_VEHICLES_URL' not in city_data and 'loc_key' in city_data:
        city_data['API_AVAILABLE_VEHICLES_URL'] = API_AVAILABLE_VEHICLES_URL(loc=city_data['loc_key'])

    if 'API_AVAILABLE_VEHICLES_HEADERS' not in city_data:
        city_data['API_AVAILABLE_VEHICLES_HEADERS'] = API_AVAILABLE_VEHICLES_HEADERS

KNOWN_CITIES = [
    city for city in CITIES
    if ('BOUNDS' in CITIES[city]
        and 'MAP_LIMITS' in CITIES[city]
        and 'DEGREE_LENGTHS' in CITIES[city]
        and 'MAP_SIZES' in CITIES[city]
        and 'LABELS' in CITIES[city])
    ]
